#!/bin/bash

# bash-n-client - bash library for connect-n game clients
#
# Copyright (C) 2019, 2020  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of bash-n.
#
# bash-n is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# bash-n is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with bash-n.  If not, see <http://www.gnu.org/licenses/>.

############################

# overwrite these hooks with your own strategy

# gets called when it is our turn
# RETURN the column number [0-6] of your move
calculate_move()
{
    _die "no implementation of calculate_move() - overwrite this function!"
}

# gets called when the server has received a move in the current game
# $1 CLIENT NAME that made the move
# $2 COLUMN [0-6] where the move was made
record_move()
{
    _die "no implementation of record_move() - overwrite this function!"
}

# gets called when a new game starts - use this to init or reset game state
# $1 CLIENT NAME of our opponent
game_start()
{
    _die "no implementation of game_start() - overwrite this function!"
}

# gets called when a game ends
# $1 RESULT is one of [WIN|DRAW|LOSE]
# $2 CLIENT NAME that scored the result
# $3 REASON of the result
game_end()
{
    _die "no implementation of game_end() - overwrite this function!"
}

############################

bash_n_state=UNDEFINED

# $* MESSAGE
_die()
{
    echo "$@"
    exit 1
}

# $1 COMMAND to send
# $* ARGUMENTS to send
_send()
{
    local IFS=';'
    echo "$*" >&3
}

_on_connected()
{
    bash_n_state=CONNECTED
}

# $1 SEASON HASH
_on_new_season()
{
    local hash=$1
    bash_n_state=SEASON
    _send JOIN "$hash"
}

# $1 OPPONENT
_on_new_game()
{
    local opponent=$1
    bash_n_state=GAME
    game_start "$opponent"
}

# $1 TURN HASH
_on_execute_turn()
{
    local hash=$1
    calculate_move
    _send INSERT $? "$hash"
}

# $1 RESULT is one of [WIN|DRAW|LOSE]
# $2 CLIENT NAME that scored the result
# $3 REASON of the result
_on_game_result()
{
    local result=$1 who=$2 why=$3
    bash_n_state=SEASON
    game_end "$result" "$who" "$why"
}

# set up filedescriptors:
# 0 is input from server via UDP
# 1 is the tty if it can be determined, regular stderr otherwise
# 2 is regular stderr
# 3 is output to server via UDP
_setup_redirects()
{
    exec 3>&1

    if tty -s 2>/dev/null; then
	exec 1>"$(tty)"
    else
	exec 1>&2
    fi
}

# $1 NAME of the client
start_client()
{
    local name=$1

    _setup_redirects

    bash_n_state=CONNECTING
    _send REGISTER "$name"

    while IFS=\; read -ra line; do
	local cmd=${line[0]}
	case "$bash_n_state-$cmd" in
	    CONNECTING-"Welcome $name")
		_on_connected
		;;
	    CONNECTED-NEW\ SEASON) ;&
	    SEASON-NEW\ SEASON)
		_on_new_season "${line[1]}"
		;;
	    SEASON-NEW\ GAME)
		_on_new_game "${line[1]}"
		;;
	    GAME-YOURTURN)
		_on_execute_turn "${line[1]}"
		;;
	    GAME-TOKEN\ INSERTED)
		record_move "${line[1]}" "${line[2]}"
		;;
	    GAME-RESULT)
		_on_game_result "${line[1]}" "${line[2]}" "${line[3]}"
		;;
	    *)
		_die "received unknown command <$cmd> in state <$bash_n_state>"
		;;
	esac
    done
}
